/****************************************************************************
 *                                                                          *
 *  Author : lukasz.iwaszkiewicz@gmail.com                                  *
 *  ~~~~~~~~                                                                *
 *  License : see COPYING file for details.                                 *
 *  ~~~~~~~~~                                                               *
 ****************************************************************************/

module;
#include <format>
#include <ranges>
module logic.processing;
import logic.data;

namespace logic {

/**
 * With flipping and LUT. Should work the same as the `Downsample<2, Collection>::operator()`
 */
Bytes downsample2 (Bytes const &in, bool *state)
{
        static constexpr size_t BITS = 2;

        if (in.size () % BITS) {
                throw logic::Exception{std::format ("in.size ()[{}] % {} != 0", in.size (), BITS)};
        }

        using Lut0 = std::array<uint8_t, std::numeric_limits<uint8_t>::max () + 1>;
        using Lut1 = std::array<Lut0, 2>;

        // Both LUTs generated using lutD2_f
        static constexpr Lut1 lut = {
                Lut0{
                        0,  1,  1,  1,  2,  2,  2,  3,  2,  2,  2,  3,  2,  3,  3,  3,  4,  4,  4,  5,  4,  5,  5,  5,  4,  5,  5,  5,  6,
                        6,  6,  7,  4,  4,  4,  5,  4,  5,  5,  5,  4,  5,  5,  5,  6,  6,  6,  7,  4,  5,  5,  5,  6,  6,  6,  7,  6,  6,
                        6,  7,  6,  7,  7,  7,  8,  8,  8,  9,  8,  9,  9,  9,  8,  9,  9,  9,  10, 10, 10, 11, 8,  9,  9,  9,  10, 10, 10,
                        11, 10, 10, 10, 11, 10, 11, 11, 11, 8,  9,  9,  9,  10, 10, 10, 11, 10, 10, 10, 11, 10, 11, 11, 11, 12, 12, 12, 13,
                        12, 13, 13, 13, 12, 13, 13, 13, 14, 14, 14, 15, 8,  8,  8,  9,  8,  9,  9,  9,  8,  9,  9,  9,  10, 10, 10, 11, 8,
                        9,  9,  9,  10, 10, 10, 11, 10, 10, 10, 11, 10, 11, 11, 11, 8,  9,  9,  9,  10, 10, 10, 11, 10, 10, 10, 11, 10, 11,
                        11, 11, 12, 12, 12, 13, 12, 13, 13, 13, 12, 13, 13, 13, 14, 14, 14, 15, 8,  9,  9,  9,  10, 10, 10, 11, 10, 10, 10,
                        11, 10, 11, 11, 11, 12, 12, 12, 13, 12, 13, 13, 13, 12, 13, 13, 13, 14, 14, 14, 15, 12, 12, 12, 13, 12, 13, 13, 13,
                        12, 13, 13, 13, 14, 14, 14, 15, 12, 13, 13, 13, 14, 14, 14, 15, 14, 14, 14, 15, 14, 15, 15, 15,
                },
                Lut0{
                        0,  0,  0,  1,  0,  1,  1,  1,  0,  1,  1,  1,  2,  2,  2,  3,  0,  1,  1,  1,  2,  2,  2,  3,  2, 2,  2,  3,  2,
                        3,  3,  3,  0,  1,  1,  1,  2,  2,  2,  3,  2,  2,  2,  3,  2,  3,  3,  3,  4,  4,  4,  5,  4,  5, 5,  5,  4,  5,
                        5,  5,  6,  6,  6,  7,  0,  1,  1,  1,  2,  2,  2,  3,  2,  2,  2,  3,  2,  3,  3,  3,  4,  4,  4, 5,  4,  5,  5,
                        5,  4,  5,  5,  5,  6,  6,  6,  7,  4,  4,  4,  5,  4,  5,  5,  5,  4,  5,  5,  5,  6,  6,  6,  7, 4,  5,  5,  5,
                        6,  6,  6,  7,  6,  6,  6,  7,  6,  7,  7,  7,  0,  1,  1,  1,  2,  2,  2,  3,  2,  2,  2,  3,  2, 3,  3,  3,  4,
                        4,  4,  5,  4,  5,  5,  5,  4,  5,  5,  5,  6,  6,  6,  7,  4,  4,  4,  5,  4,  5,  5,  5,  4,  5, 5,  5,  6,  6,
                        6,  7,  4,  5,  5,  5,  6,  6,  6,  7,  6,  6,  6,  7,  6,  7,  7,  7,  8,  8,  8,  9,  8,  9,  9, 9,  8,  9,  9,
                        9,  10, 10, 10, 11, 8,  9,  9,  9,  10, 10, 10, 11, 10, 10, 10, 11, 10, 11, 11, 11, 8,  9,  9,  9, 10, 10, 10, 11,
                        10, 10, 10, 11, 10, 11, 11, 11, 12, 12, 12, 13, 12, 13, 13, 13, 12, 13, 13, 13, 14, 14, 14, 15,
                },
        };

        static constexpr Lut1 lutS = {
                Lut0{
                        0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0,
                        1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1,
                        1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1,
                        0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0,
                        1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0,
                        1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0,
                        0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0,
                },
                Lut0{
                        1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1,
                        0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0,
                        0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0,
                        1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1,
                        0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1,
                        0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1,
                        1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,
                },

        };

        Bytes out (in.size () / BITS);
        auto &s = *state;

        std::ranges::copy (in | std::views::adjacent_transform<2> ([&s] (uint8_t a, uint8_t b) -> uint8_t {
                                   uint8_t outb = lut[s][a] << 4;
                                   s = lutS[s][a];

                                   outb |= lut[s][b];
                                   s = lutS[s][b];
                                   return outb;
                           }) | std::views::stride (2),
                           out.begin ());

        // "Manual" implementatio is order of magnitude faster under -O0 which simetimes can be helpful for debugging.
        // for (size_t i = 0; auto &ch : out) {
        //         uint8_t a = in[i * 2];
        //         uint8_t b = in[i * 2 + 1];
        //         ch = lut[*state][a] << 4;
        //         *state = lutS[*state][a];

        //         ch |= lut[*state][b];
        //         *state = lutS[*state][b];
        // }

        return out;
}

/****************************************************************************/

Bytes downsample4 (Bytes const &in, uint8_t *state0)
{
        static constexpr size_t BITS = 4;

        if (in.size () % BITS) {
                throw logic::Exception{std::format ("in.size ()[{}] % {} != 0", in.size (), BITS)};
        }

        using Lut0 = std::array<uint8_t, std::numeric_limits<uint8_t>::max () + 1>;
        using Lut1 = std::array<Lut0, 4>;

        // Both LUTs generated using lutD4_f
        static constexpr Lut1 lut = {
                Lut0{
                        // s0 == 0, s1 == 0
                        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2,
                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                        2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 3, 3,
                        3, 2, 2, 2, 3, 2, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2,
                        2, 2, 2, 3, 2, 2, 2, 3, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 3, 3, 3, 2, 2, 2, 3, 2, 3, 3, 3, 2,
                        3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 3, 3, 3, 2, 2, 2, 3, 2, 3, 3, 3, 2, 3, 3, 3, 3, 3,
                        3, 3, 2, 2, 2, 3, 2, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                },
                Lut0{
                        // s0 == 0, s1 == 1
                        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0,
                        1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1,
                        1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                        2, 2, 2, 2, 2, 2, 3, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                        2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 3, 3, 3,
                },
                Lut0{
                        // s0 == 1, s1 == 0
                        0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                        3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 3, 3, 3, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2,
                        2, 2, 3, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 3,
                        3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 3, 3, 3, 2, 2, 2, 3, 2, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3,
                },
                Lut0{
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0,
                        0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                        0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
                        1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1,
                        0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3,
                },
        };

        static constexpr Lut1 lutS = {
                Lut0{
                        0, 3, 3, 1, 3, 1, 1, 2, 3, 1, 1, 2, 1, 2, 2, 0, 3, 1, 1, 2, 1, 2, 2, 0, 1, 2, 2, 0, 2, 0, 0, 3, 3, 1, 1, 2, 1,
                        2, 2, 0, 1, 2, 2, 0, 2, 0, 0, 3, 1, 2, 2, 0, 2, 0, 0, 3, 2, 0, 0, 3, 0, 3, 3, 1, 3, 1, 1, 2, 1, 2, 2, 0, 1, 2,
                        2, 0, 2, 0, 0, 3, 1, 2, 2, 0, 2, 0, 0, 3, 2, 0, 0, 3, 0, 3, 3, 1, 1, 2, 2, 0, 2, 0, 0, 3, 2, 0, 0, 3, 0, 3, 3,
                        1, 2, 0, 0, 3, 0, 3, 3, 1, 0, 3, 3, 1, 3, 1, 1, 2, 3, 1, 1, 2, 1, 2, 2, 0, 1, 2, 2, 0, 2, 0, 0, 3, 1, 2, 2, 0,
                        2, 0, 0, 3, 2, 0, 0, 3, 0, 3, 3, 1, 1, 2, 2, 0, 2, 0, 0, 3, 2, 0, 0, 3, 0, 3, 3, 1, 2, 0, 0, 3, 0, 3, 3, 1, 0,
                        3, 3, 1, 3, 1, 1, 2, 1, 2, 2, 0, 2, 0, 0, 3, 2, 0, 0, 3, 0, 3, 3, 1, 2, 0, 0, 3, 0, 3, 3, 1, 0, 3, 3, 1, 3, 1,
                        1, 2, 2, 0, 0, 3, 0, 3, 3, 1, 0, 3, 3, 1, 3, 1, 1, 2, 0, 3, 3, 1, 3, 1, 1, 2, 3, 1, 1, 2, 1, 2, 2, 0,
                },
                Lut0{
                        1, 2, 2, 0, 2, 0, 0, 3, 2, 0, 0, 3, 0, 3, 3, 1, 2, 0, 0, 3, 0, 3, 3, 1, 0, 3, 3, 1, 3, 1, 1, 2, 2, 0, 0, 3, 0,
                        3, 3, 1, 0, 3, 3, 1, 3, 1, 1, 2, 0, 3, 3, 1, 3, 1, 1, 2, 3, 1, 1, 2, 1, 2, 2, 0, 2, 0, 0, 3, 0, 3, 3, 1, 0, 3,
                        3, 1, 3, 1, 1, 2, 0, 3, 3, 1, 3, 1, 1, 2, 3, 1, 1, 2, 1, 2, 2, 0, 0, 3, 3, 1, 3, 1, 1, 2, 3, 1, 1, 2, 1, 2, 2,
                        0, 3, 1, 1, 2, 1, 2, 2, 0, 1, 2, 2, 0, 2, 0, 0, 3, 2, 0, 0, 3, 0, 3, 3, 1, 0, 3, 3, 1, 3, 1, 1, 2, 0, 3, 3, 1,
                        3, 1, 1, 2, 3, 1, 1, 2, 1, 2, 2, 0, 0, 3, 3, 1, 3, 1, 1, 2, 3, 1, 1, 2, 1, 2, 2, 0, 3, 1, 1, 2, 1, 2, 2, 0, 1,
                        2, 2, 0, 2, 0, 0, 3, 0, 3, 3, 1, 3, 1, 1, 2, 3, 1, 1, 2, 1, 2, 2, 0, 3, 1, 1, 2, 1, 2, 2, 0, 1, 2, 2, 0, 2, 0,
                        0, 3, 3, 1, 1, 2, 1, 2, 2, 0, 1, 2, 2, 0, 2, 0, 0, 3, 1, 2, 2, 0, 2, 0, 0, 3, 2, 0, 0, 3, 0, 3, 3, 1,
                },
                Lut0{
                        2, 0, 0, 3, 0, 3, 3, 1, 0, 3, 3, 1, 3, 1, 1, 2, 0, 3, 3, 1, 3, 1, 1, 2, 3, 1, 1, 2, 1, 2, 2, 0, 0, 3, 3, 1, 3,
                        1, 1, 2, 3, 1, 1, 2, 1, 2, 2, 0, 3, 1, 1, 2, 1, 2, 2, 0, 1, 2, 2, 0, 2, 0, 0, 3, 0, 3, 3, 1, 3, 1, 1, 2, 3, 1,
                        1, 2, 1, 2, 2, 0, 3, 1, 1, 2, 1, 2, 2, 0, 1, 2, 2, 0, 2, 0, 0, 3, 3, 1, 1, 2, 1, 2, 2, 0, 1, 2, 2, 0, 2, 0, 0,
                        3, 1, 2, 2, 0, 2, 0, 0, 3, 2, 0, 0, 3, 0, 3, 3, 1, 0, 3, 3, 1, 3, 1, 1, 2, 3, 1, 1, 2, 1, 2, 2, 0, 3, 1, 1, 2,
                        1, 2, 2, 0, 1, 2, 2, 0, 2, 0, 0, 3, 3, 1, 1, 2, 1, 2, 2, 0, 1, 2, 2, 0, 2, 0, 0, 3, 1, 2, 2, 0, 2, 0, 0, 3, 2,
                        0, 0, 3, 0, 3, 3, 1, 3, 1, 1, 2, 1, 2, 2, 0, 1, 2, 2, 0, 2, 0, 0, 3, 1, 2, 2, 0, 2, 0, 0, 3, 2, 0, 0, 3, 0, 3,
                        3, 1, 1, 2, 2, 0, 2, 0, 0, 3, 2, 0, 0, 3, 0, 3, 3, 1, 2, 0, 0, 3, 0, 3, 3, 1, 0, 3, 3, 1, 3, 1, 1, 2,
                },
                Lut0{
                        3, 1, 1, 2, 1, 2, 2, 0, 1, 2, 2, 0, 2, 0, 0, 3, 1, 2, 2, 0, 2, 0, 0, 3, 2, 0, 0, 3, 0, 3, 3, 1, 1, 2, 2, 0, 2,
                        0, 0, 3, 2, 0, 0, 3, 0, 3, 3, 1, 2, 0, 0, 3, 0, 3, 3, 1, 0, 3, 3, 1, 3, 1, 1, 2, 1, 2, 2, 0, 2, 0, 0, 3, 2, 0,
                        0, 3, 0, 3, 3, 1, 2, 0, 0, 3, 0, 3, 3, 1, 0, 3, 3, 1, 3, 1, 1, 2, 2, 0, 0, 3, 0, 3, 3, 1, 0, 3, 3, 1, 3, 1, 1,
                        2, 0, 3, 3, 1, 3, 1, 1, 2, 3, 1, 1, 2, 1, 2, 2, 0, 1, 2, 2, 0, 2, 0, 0, 3, 2, 0, 0, 3, 0, 3, 3, 1, 2, 0, 0, 3,
                        0, 3, 3, 1, 0, 3, 3, 1, 3, 1, 1, 2, 2, 0, 0, 3, 0, 3, 3, 1, 0, 3, 3, 1, 3, 1, 1, 2, 0, 3, 3, 1, 3, 1, 1, 2, 3,
                        1, 1, 2, 1, 2, 2, 0, 2, 0, 0, 3, 0, 3, 3, 1, 0, 3, 3, 1, 3, 1, 1, 2, 0, 3, 3, 1, 3, 1, 1, 2, 3, 1, 1, 2, 1, 2,
                        2, 0, 0, 3, 3, 1, 3, 1, 1, 2, 3, 1, 1, 2, 1, 2, 2, 0, 3, 1, 1, 2, 1, 2, 2, 0, 1, 2, 2, 0, 2, 0, 0, 3,
                },
        };

        Bytes out (in.size () / BITS);
        auto &s = *state0;

        std::ranges::copy (in | std::views::adjacent_transform<4> ([&s] (uint8_t a, uint8_t b, uint8_t c, uint8_t d) -> uint8_t {
                                   uint8_t outb = lut[s][a] << 6;
                                   s = lutS[s][a];

                                   outb |= lut[s][b] << 4;
                                   s = lutS[s][b];

                                   outb |= lut[s][c] << 2;
                                   s = lutS[s][c];

                                   outb |= lut[s][d];
                                   s = lutS[s][d];

                                   return outb;
                           }) | std::views::stride (4),
                           out.begin ());

        return out;
}

/****************************************************************************/

Bytes downsample8 (Bytes const &in, uint8_t *state)
{
        static constexpr size_t BITS = 8;

        if (in.size () % BITS) {
                throw logic::Exception{std::format ("in.size ()[{}] % {} != 0", in.size (), BITS)};
        }

        using Lut0 = std::array<uint8_t, std::numeric_limits<uint8_t>::max () + 1>;
        using Lut1 = std::array<Lut0, 8>;

        // Both LUTs generated using lutD4_f
        static constexpr Lut1 lut = {
                Lut0{
                        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                },
                Lut0{
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1,
                        1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
                        0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0,
                        1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1,
                        1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                },
                Lut0{
                        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0,
                        1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1,
                        1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                },
                Lut0{
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1,
                },
                Lut0{
                        0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                },
                Lut0{
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
                        0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1,
                        1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
                },
                Lut0{
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0,
                        0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                        0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
                        1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1,
                        0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                },
                Lut0{
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
                },
        };

        static constexpr Lut1 lutS = {
                Lut0{
                        0, 7, 7, 3, 7, 3, 3, 5, 7, 3, 3, 5, 3, 5, 5, 1, 7, 3, 3, 5, 3, 5, 5, 1, 3, 5, 5, 1, 5, 1, 1, 6, 7, 3, 3, 5, 3,
                        5, 5, 1, 3, 5, 5, 1, 5, 1, 1, 6, 3, 5, 5, 1, 5, 1, 1, 6, 5, 1, 1, 6, 1, 6, 6, 2, 7, 3, 3, 5, 3, 5, 5, 1, 3, 5,
                        5, 1, 5, 1, 1, 6, 3, 5, 5, 1, 5, 1, 1, 6, 5, 1, 1, 6, 1, 6, 6, 2, 3, 5, 5, 1, 5, 1, 1, 6, 5, 1, 1, 6, 1, 6, 6,
                        2, 5, 1, 1, 6, 1, 6, 6, 2, 1, 6, 6, 2, 6, 2, 2, 4, 7, 3, 3, 5, 3, 5, 5, 1, 3, 5, 5, 1, 5, 1, 1, 6, 3, 5, 5, 1,
                        5, 1, 1, 6, 5, 1, 1, 6, 1, 6, 6, 2, 3, 5, 5, 1, 5, 1, 1, 6, 5, 1, 1, 6, 1, 6, 6, 2, 5, 1, 1, 6, 1, 6, 6, 2, 1,
                        6, 6, 2, 6, 2, 2, 4, 3, 5, 5, 1, 5, 1, 1, 6, 5, 1, 1, 6, 1, 6, 6, 2, 5, 1, 1, 6, 1, 6, 6, 2, 1, 6, 6, 2, 6, 2,
                        2, 4, 5, 1, 1, 6, 1, 6, 6, 2, 1, 6, 6, 2, 6, 2, 2, 4, 1, 6, 6, 2, 6, 2, 2, 4, 6, 2, 2, 4, 2, 4, 4, 0,
                },
                Lut0{
                        1, 6, 6, 2, 6, 2, 2, 4, 6, 2, 2, 4, 2, 4, 4, 0, 6, 2, 2, 4, 2, 4, 4, 0, 2, 4, 4, 0, 4, 0, 0, 7, 6, 2, 2, 4, 2,
                        4, 4, 0, 2, 4, 4, 0, 4, 0, 0, 7, 2, 4, 4, 0, 4, 0, 0, 7, 4, 0, 0, 7, 0, 7, 7, 3, 6, 2, 2, 4, 2, 4, 4, 0, 2, 4,
                        4, 0, 4, 0, 0, 7, 2, 4, 4, 0, 4, 0, 0, 7, 4, 0, 0, 7, 0, 7, 7, 3, 2, 4, 4, 0, 4, 0, 0, 7, 4, 0, 0, 7, 0, 7, 7,
                        3, 4, 0, 0, 7, 0, 7, 7, 3, 0, 7, 7, 3, 7, 3, 3, 5, 6, 2, 2, 4, 2, 4, 4, 0, 2, 4, 4, 0, 4, 0, 0, 7, 2, 4, 4, 0,
                        4, 0, 0, 7, 4, 0, 0, 7, 0, 7, 7, 3, 2, 4, 4, 0, 4, 0, 0, 7, 4, 0, 0, 7, 0, 7, 7, 3, 4, 0, 0, 7, 0, 7, 7, 3, 0,
                        7, 7, 3, 7, 3, 3, 5, 2, 4, 4, 0, 4, 0, 0, 7, 4, 0, 0, 7, 0, 7, 7, 3, 4, 0, 0, 7, 0, 7, 7, 3, 0, 7, 7, 3, 7, 3,
                        3, 5, 4, 0, 0, 7, 0, 7, 7, 3, 0, 7, 7, 3, 7, 3, 3, 5, 0, 7, 7, 3, 7, 3, 3, 5, 7, 3, 3, 5, 3, 5, 5, 1,
                },
                Lut0{
                        2, 4, 4, 0, 4, 0, 0, 7, 4, 0, 0, 7, 0, 7, 7, 3, 4, 0, 0, 7, 0, 7, 7, 3, 0, 7, 7, 3, 7, 3, 3, 5, 4, 0, 0, 7, 0,
                        7, 7, 3, 0, 7, 7, 3, 7, 3, 3, 5, 0, 7, 7, 3, 7, 3, 3, 5, 7, 3, 3, 5, 3, 5, 5, 1, 4, 0, 0, 7, 0, 7, 7, 3, 0, 7,
                        7, 3, 7, 3, 3, 5, 0, 7, 7, 3, 7, 3, 3, 5, 7, 3, 3, 5, 3, 5, 5, 1, 0, 7, 7, 3, 7, 3, 3, 5, 7, 3, 3, 5, 3, 5, 5,
                        1, 7, 3, 3, 5, 3, 5, 5, 1, 3, 5, 5, 1, 5, 1, 1, 6, 4, 0, 0, 7, 0, 7, 7, 3, 0, 7, 7, 3, 7, 3, 3, 5, 0, 7, 7, 3,
                        7, 3, 3, 5, 7, 3, 3, 5, 3, 5, 5, 1, 0, 7, 7, 3, 7, 3, 3, 5, 7, 3, 3, 5, 3, 5, 5, 1, 7, 3, 3, 5, 3, 5, 5, 1, 3,
                        5, 5, 1, 5, 1, 1, 6, 0, 7, 7, 3, 7, 3, 3, 5, 7, 3, 3, 5, 3, 5, 5, 1, 7, 3, 3, 5, 3, 5, 5, 1, 3, 5, 5, 1, 5, 1,
                        1, 6, 7, 3, 3, 5, 3, 5, 5, 1, 3, 5, 5, 1, 5, 1, 1, 6, 3, 5, 5, 1, 5, 1, 1, 6, 5, 1, 1, 6, 1, 6, 6, 2,
                },
                Lut0{
                        3, 5, 5, 1, 5, 1, 1, 6, 5, 1, 1, 6, 1, 6, 6, 2, 5, 1, 1, 6, 1, 6, 6, 2, 1, 6, 6, 2, 6, 2, 2, 4, 5, 1, 1, 6, 1,
                        6, 6, 2, 1, 6, 6, 2, 6, 2, 2, 4, 1, 6, 6, 2, 6, 2, 2, 4, 6, 2, 2, 4, 2, 4, 4, 0, 5, 1, 1, 6, 1, 6, 6, 2, 1, 6,
                        6, 2, 6, 2, 2, 4, 1, 6, 6, 2, 6, 2, 2, 4, 6, 2, 2, 4, 2, 4, 4, 0, 1, 6, 6, 2, 6, 2, 2, 4, 6, 2, 2, 4, 2, 4, 4,
                        0, 6, 2, 2, 4, 2, 4, 4, 0, 2, 4, 4, 0, 4, 0, 0, 7, 5, 1, 1, 6, 1, 6, 6, 2, 1, 6, 6, 2, 6, 2, 2, 4, 1, 6, 6, 2,
                        6, 2, 2, 4, 6, 2, 2, 4, 2, 4, 4, 0, 1, 6, 6, 2, 6, 2, 2, 4, 6, 2, 2, 4, 2, 4, 4, 0, 6, 2, 2, 4, 2, 4, 4, 0, 2,
                        4, 4, 0, 4, 0, 0, 7, 1, 6, 6, 2, 6, 2, 2, 4, 6, 2, 2, 4, 2, 4, 4, 0, 6, 2, 2, 4, 2, 4, 4, 0, 2, 4, 4, 0, 4, 0,
                        0, 7, 6, 2, 2, 4, 2, 4, 4, 0, 2, 4, 4, 0, 4, 0, 0, 7, 2, 4, 4, 0, 4, 0, 0, 7, 4, 0, 0, 7, 0, 7, 7, 3,
                },
                Lut0{
                        4, 0, 0, 7, 0, 7, 7, 3, 0, 7, 7, 3, 7, 3, 3, 5, 0, 7, 7, 3, 7, 3, 3, 5, 7, 3, 3, 5, 3, 5, 5, 1, 0, 7, 7, 3, 7,
                        3, 3, 5, 7, 3, 3, 5, 3, 5, 5, 1, 7, 3, 3, 5, 3, 5, 5, 1, 3, 5, 5, 1, 5, 1, 1, 6, 0, 7, 7, 3, 7, 3, 3, 5, 7, 3,
                        3, 5, 3, 5, 5, 1, 7, 3, 3, 5, 3, 5, 5, 1, 3, 5, 5, 1, 5, 1, 1, 6, 7, 3, 3, 5, 3, 5, 5, 1, 3, 5, 5, 1, 5, 1, 1,
                        6, 3, 5, 5, 1, 5, 1, 1, 6, 5, 1, 1, 6, 1, 6, 6, 2, 0, 7, 7, 3, 7, 3, 3, 5, 7, 3, 3, 5, 3, 5, 5, 1, 7, 3, 3, 5,
                        3, 5, 5, 1, 3, 5, 5, 1, 5, 1, 1, 6, 7, 3, 3, 5, 3, 5, 5, 1, 3, 5, 5, 1, 5, 1, 1, 6, 3, 5, 5, 1, 5, 1, 1, 6, 5,
                        1, 1, 6, 1, 6, 6, 2, 7, 3, 3, 5, 3, 5, 5, 1, 3, 5, 5, 1, 5, 1, 1, 6, 3, 5, 5, 1, 5, 1, 1, 6, 5, 1, 1, 6, 1, 6,
                        6, 2, 3, 5, 5, 1, 5, 1, 1, 6, 5, 1, 1, 6, 1, 6, 6, 2, 5, 1, 1, 6, 1, 6, 6, 2, 1, 6, 6, 2, 6, 2, 2, 4,
                },
                Lut0{
                        5, 1, 1, 6, 1, 6, 6, 2, 1, 6, 6, 2, 6, 2, 2, 4, 1, 6, 6, 2, 6, 2, 2, 4, 6, 2, 2, 4, 2, 4, 4, 0, 1, 6, 6, 2, 6,
                        2, 2, 4, 6, 2, 2, 4, 2, 4, 4, 0, 6, 2, 2, 4, 2, 4, 4, 0, 2, 4, 4, 0, 4, 0, 0, 7, 1, 6, 6, 2, 6, 2, 2, 4, 6, 2,
                        2, 4, 2, 4, 4, 0, 6, 2, 2, 4, 2, 4, 4, 0, 2, 4, 4, 0, 4, 0, 0, 7, 6, 2, 2, 4, 2, 4, 4, 0, 2, 4, 4, 0, 4, 0, 0,
                        7, 2, 4, 4, 0, 4, 0, 0, 7, 4, 0, 0, 7, 0, 7, 7, 3, 1, 6, 6, 2, 6, 2, 2, 4, 6, 2, 2, 4, 2, 4, 4, 0, 6, 2, 2, 4,
                        2, 4, 4, 0, 2, 4, 4, 0, 4, 0, 0, 7, 6, 2, 2, 4, 2, 4, 4, 0, 2, 4, 4, 0, 4, 0, 0, 7, 2, 4, 4, 0, 4, 0, 0, 7, 4,
                        0, 0, 7, 0, 7, 7, 3, 6, 2, 2, 4, 2, 4, 4, 0, 2, 4, 4, 0, 4, 0, 0, 7, 2, 4, 4, 0, 4, 0, 0, 7, 4, 0, 0, 7, 0, 7,
                        7, 3, 2, 4, 4, 0, 4, 0, 0, 7, 4, 0, 0, 7, 0, 7, 7, 3, 4, 0, 0, 7, 0, 7, 7, 3, 0, 7, 7, 3, 7, 3, 3, 5,
                },
                Lut0{
                        6, 2, 2, 4, 2, 4, 4, 0, 2, 4, 4, 0, 4, 0, 0, 7, 2, 4, 4, 0, 4, 0, 0, 7, 4, 0, 0, 7, 0, 7, 7, 3, 2, 4, 4, 0, 4,
                        0, 0, 7, 4, 0, 0, 7, 0, 7, 7, 3, 4, 0, 0, 7, 0, 7, 7, 3, 0, 7, 7, 3, 7, 3, 3, 5, 2, 4, 4, 0, 4, 0, 0, 7, 4, 0,
                        0, 7, 0, 7, 7, 3, 4, 0, 0, 7, 0, 7, 7, 3, 0, 7, 7, 3, 7, 3, 3, 5, 4, 0, 0, 7, 0, 7, 7, 3, 0, 7, 7, 3, 7, 3, 3,
                        5, 0, 7, 7, 3, 7, 3, 3, 5, 7, 3, 3, 5, 3, 5, 5, 1, 2, 4, 4, 0, 4, 0, 0, 7, 4, 0, 0, 7, 0, 7, 7, 3, 4, 0, 0, 7,
                        0, 7, 7, 3, 0, 7, 7, 3, 7, 3, 3, 5, 4, 0, 0, 7, 0, 7, 7, 3, 0, 7, 7, 3, 7, 3, 3, 5, 0, 7, 7, 3, 7, 3, 3, 5, 7,
                        3, 3, 5, 3, 5, 5, 1, 4, 0, 0, 7, 0, 7, 7, 3, 0, 7, 7, 3, 7, 3, 3, 5, 0, 7, 7, 3, 7, 3, 3, 5, 7, 3, 3, 5, 3, 5,
                        5, 1, 0, 7, 7, 3, 7, 3, 3, 5, 7, 3, 3, 5, 3, 5, 5, 1, 7, 3, 3, 5, 3, 5, 5, 1, 3, 5, 5, 1, 5, 1, 1, 6,
                },
                Lut0{
                        7, 3, 3, 5, 3, 5, 5, 1, 3, 5, 5, 1, 5, 1, 1, 6, 3, 5, 5, 1, 5, 1, 1, 6, 5, 1, 1, 6, 1, 6, 6, 2, 3, 5, 5, 1, 5,
                        1, 1, 6, 5, 1, 1, 6, 1, 6, 6, 2, 5, 1, 1, 6, 1, 6, 6, 2, 1, 6, 6, 2, 6, 2, 2, 4, 3, 5, 5, 1, 5, 1, 1, 6, 5, 1,
                        1, 6, 1, 6, 6, 2, 5, 1, 1, 6, 1, 6, 6, 2, 1, 6, 6, 2, 6, 2, 2, 4, 5, 1, 1, 6, 1, 6, 6, 2, 1, 6, 6, 2, 6, 2, 2,
                        4, 1, 6, 6, 2, 6, 2, 2, 4, 6, 2, 2, 4, 2, 4, 4, 0, 3, 5, 5, 1, 5, 1, 1, 6, 5, 1, 1, 6, 1, 6, 6, 2, 5, 1, 1, 6,
                        1, 6, 6, 2, 1, 6, 6, 2, 6, 2, 2, 4, 5, 1, 1, 6, 1, 6, 6, 2, 1, 6, 6, 2, 6, 2, 2, 4, 1, 6, 6, 2, 6, 2, 2, 4, 6,
                        2, 2, 4, 2, 4, 4, 0, 5, 1, 1, 6, 1, 6, 6, 2, 1, 6, 6, 2, 6, 2, 2, 4, 1, 6, 6, 2, 6, 2, 2, 4, 6, 2, 2, 4, 2, 4,
                        4, 0, 1, 6, 6, 2, 6, 2, 2, 4, 6, 2, 2, 4, 2, 4, 4, 0, 6, 2, 2, 4, 2, 4, 4, 0, 2, 4, 4, 0, 4, 0, 0, 7,
                },
        };

        Bytes out (in.size () / BITS);
        auto &s = *state;

        std::ranges::copy (in
                                   | std::views::adjacent_transform<8> ([&s] (uint8_t a, uint8_t b, uint8_t c, uint8_t d, uint8_t e, uint8_t f,
                                                                              uint8_t g, uint8_t h) -> uint8_t {
                                             uint8_t outb = lut[s][a] << 7;
                                             s = lutS[s][a];

                                             outb |= lut[s][b] << 6;
                                             s = lutS[s][b];

                                             outb |= lut[s][c] << 5;
                                             s = lutS[s][c];

                                             outb |= lut[s][d] << 4;
                                             s = lutS[s][d];

                                             outb |= lut[s][e] << 3;
                                             s = lutS[s][e];

                                             outb |= lut[s][f] << 2;
                                             s = lutS[s][f];

                                             outb |= lut[s][g] << 1;
                                             s = lutS[s][g];

                                             outb |= lut[s][h];
                                             s = lutS[s][h];

                                             return outb;
                                     })
                                   | std::views::stride (8),
                           out.begin ());

        return out;
}

} // namespace logic