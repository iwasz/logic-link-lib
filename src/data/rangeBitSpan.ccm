/****************************************************************************
 *                                                                          *
 *  Author : lukasz.iwaszkiewicz@gmail.com                                  *
 *  ~~~~~~~~                                                                *
 *  License : see COPYING file for details.                                 *
 *  ~~~~~~~~~                                                               *
 ****************************************************************************/

module;
#include <algorithm>
#include <climits>
#include <cstdint>
#include <iterator>
export module logic.data:range.span;

namespace logic {

/**
 * TODO let the name express dependency on Block and BlockArray
 */
template <std::unsigned_integral T, typename Container> class RangeIterator {
public:
        using BlockIterator = Container::const_iterator;
        using SubRange = std::ranges::subrange<BlockIterator>;                                // Block by block iteration.
        using ElementIterator = Container::value_type::Container::value_type::const_iterator; // T by T element iteration (usually byte by byte).
        using difference_type = std::ptrdiff_t;
        using value_type = bool;

        RangeIterator () = default;
        RangeIterator (SubRange data, size_t channelIndex, size_t bitOffset) : data{data}, block{data.cbegin ()}, channelIndex{channelIndex}
        {
                advance (bitOffset);
        }

        bool operator* () const;

        RangeIterator &operator++ ();
        RangeIterator operator++ (int);
        RangeIterator &operator-- ();
        RangeIterator operator-- (int);

        bool operator== (const RangeIterator &a) const;

        /// Advance by bitsNumber bits.  Only forward. Public for UTs.
        void advance (size_t bitsNumber);

private:
        static constexpr auto S = sizeof (T) * CHAR_BIT;

        /// Current block's channelIndex-th channel. The channel we want to iterate.
        auto const &channel () const { return block->channel (channelIndex); }

        SubRange data{}; // For example subrange<deque<Block>::const_iterator>;
        // BlockIterator blockBegin;
        BlockIterator block; // For example deque<Block>::const_iterator -> Block
        size_t channelIndex{};
        ElementIterator element; // For example std::vector<Bytes>::const_iterator

        size_t currentBitOffset{};
        size_t currentByteOffset{};
        size_t currentBlockOffset{};
};

// Move to BlockArray
// static_assert (std::bidirectional_iterator<RangeIterator<uint8_t, std::deque<Block>>>);

/****************************************************************************/

template <std::unsigned_integral T, typename Container> bool RangeIterator<T, Container>::operator* () const
{
        return (*element & T (1 << (S - 1 - currentBitOffset))) != 0;
}

/****************************************************************************/

template <std::unsigned_integral T, typename Container> void RangeIterator<T, Container>::advance (size_t bitsNumber)
{
        currentBitOffset += bitsNumber % S;
        auto byteOffset = bitsNumber / S; // That much bytes

        if (currentBitOffset >= S) {
                currentBitOffset %= S;
                ++byteOffset;
        }

        auto const channelLengthB = block->channelLength () / S;

        currentByteOffset += byteOffset % channelLengthB;
        if (currentByteOffset >= channelLengthB) {
                currentByteOffset %= channelLengthB;
                ++currentBlockOffset;
        }

        currentBlockOffset += byteOffset / channelLengthB;

        block = data.cbegin ();

        if (currentBlockOffset >= data.size ()) {
                currentBlockOffset = data.size () - 1;
                block = data.cend ();
                currentBitOffset = 0;
                currentByteOffset = 0;
        }
        else {
                std::advance (block, currentBlockOffset);
                element = channel ().cbegin ();
                std::advance (element, currentByteOffset);
        }
}

/****************************************************************************/

template <std::unsigned_integral T, typename Container> RangeIterator<T, Container> &RangeIterator<T, Container>::operator++ ()
{
        if (++currentBitOffset >= S) {
                currentBitOffset = 0;
                std::advance (element, 1);
                ++currentByteOffset;

                if (element == channel ().cend ()) {
                        std::advance (block, 1);
                        ++currentBlockOffset;
                        currentByteOffset = 0;

                        if (block != data.cend ()) {
                                element = channel ().cbegin (); // TODO but whati  if block == cend? UB here.
                        }
                }
        }

        return *this;
}

/****************************************************************************/

template <std::unsigned_integral T, typename Container> RangeIterator<T, Container> RangeIterator<T, Container>::operator++ (int)
{
        auto tmp = *this;
        ++*this;
        return tmp;
}

/****************************************************************************/

template <std::unsigned_integral T, typename Container> RangeIterator<T, Container> &RangeIterator<T, Container>::operator-- ()
{
        // // TODO Implement
        // if (currentBitOffset == 0) {
        //         currentBitOffset = S - 1;
        //         --currentElemOffset;
        // }
        // else {
        //         --currentBitOffset;
        // }

        return *this;
}

/****************************************************************************/

template <std::unsigned_integral T, typename Container> RangeIterator<T, Container> RangeIterator<T, Container>::operator-- (int)
{
        auto tmp = *this;
        --*this;
        return tmp;
}

/****************************************************************************/

template <std::unsigned_integral T, typename Container> bool RangeIterator<T, Container>::operator== (const RangeIterator &a) const
{
        return (block == a.block && block == data.cend ()) // If block iterator is at the end, there is no valid element iterator
                || (block == a.block && element == a.element && channelIndex == a.channelIndex && currentBitOffset == a.currentBitOffset);
}

/**
 * Semantics like std::span, but iteration happens bit by bit instead of
 * T element after T element. Bits are iterated over in the big endian manner
 * meaning from left to right.
 */
export template <std::unsigned_integral T, typename Container>
// requires std::same_as<typename Container::value_type, Block>
class RangeBitSpan {
public:
        // Container: for example std::deque<Block>
        using SubRange = std::ranges::subrange<typename Container::const_iterator>;
        using iterator = RangeIterator<T, Container>;
        using const_iterator = RangeIterator<T const, Container>;

        RangeBitSpan () = default;
        RangeBitSpan (SubRange data, size_t channelIndex, size_t bitOffset, size_t bitSize)
            : data{data}, channelIndex{channelIndex}, offsetInBits{bitOffset}, sizeInBits{trimSize (bitSize)}
        {
        }

        iterator begin () { return {data, channelIndex, offsetInBits}; }
        const_iterator begin () const { return {data, channelIndex, offsetInBits}; }
        const_iterator cbegin () const { return {data, channelIndex, offsetInBits}; }

        iterator end () { return {data, channelIndex, offsetInBits + sizeInBits}; }
        const_iterator end () const { return {data, channelIndex, offsetInBits + sizeInBits}; }
        const_iterator cend () const { return {data, channelIndex, offsetInBits + sizeInBits}; }

        size_t size () const { return sizeInBits; }
        bool empty () const { return sizeInBits == 0; }

private:
        static constexpr auto S = sizeof (T) * CHAR_BIT;
        size_t trimSize (size_t offset) const;

        SubRange data{};
        size_t channelIndex{};
        size_t offsetInBits{};
        size_t sizeInBits{};
};

/****************************************************************************/

template <std::unsigned_integral T, typename Container> size_t RangeBitSpan<T, Container>::trimSize (size_t offset) const
{
        if (data.empty ()) {
                return 0;
        }

        auto const maxLength = data.front ().channelLength () * data.size (); // In S units
        return std::min<size_t> (maxLength - offsetInBits, offset);
}

} // namespace logic