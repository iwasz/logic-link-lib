/****************************************************************************
 *                                                                          *
 *  Author : lukasz.iwaszkiewicz@gmail.com                                  *
 *  ~~~~~~~~                                                                *
 *  License : see COPYING file for details.                                 *
 *  ~~~~~~~~~                                                               *
 ****************************************************************************/

module;
#include "common/constants.hh"
#include <atomic>
#include <chrono>
#include <condition_variable>
#include <deque>
#include <mutex>
#include <variant>
#include <vector>
export module logic:data;

export namespace logic {

using TimePoint = std::chrono::high_resolution_clock::time_point;

using Bytes = std::vector<uint8_t>;
using Words = std::vector<uint32_t>;
using Numbers = std::vector<float>;
using Buffer = std::variant<Bytes, Words, Numbers>;

enum class StreamType : uint8_t { digital, analog };

/**
 * Sample number with corresponding sample rate.
 */
// class SampleNo {
// public:
//         SampleNo () = default;
//         /* no explicit */ SampleNo (uint64_t s) : sampleNumber_{s} {}
//         operator uint64_t () const { return sampleNumber_; }

//         SampleRate &sampleRate () { return sampleRate_; }
//         SampleRate const &sampleRate () const { return sampleRate_; }

//         // operators =, >, < will take sample rate into account.

// private:
//         SampleRate sampleRate_{};
//         uint64_t sampleNumber_{};
// };

using SampleIdx = uint64_t;
using SampleNum = uint64_t;

/**
 * Buffer of sample data. Typically this data will come from a logic analyzer device,
 * can be 8-32 bit wide, but it can also come from other sources like a file, etc.
 */
struct SampleBlock {
        StreamType type;
        SampleRate sampleRate;
        TimePoint begin;
        TimePoint end;
        Buffer buffer;
};

/**
 * The data as received from the device. Possibly compressed with LZ4.
 */
struct RawCompressedBlock {
        double bps{};        /// Debug data indicating bits per second. Not sampling rate.
        size_t overrunsNo{}; /// Number of problems that occured during the reception.
        Bytes buffer;        /// Binary data.

        void clear () { buffer.clear (); }
};

template <typename Elem> class Queue {
public:
        template <typename... T> void push (T &&...t)
        {
                {
                        std::lock_guard lock{mutex};
                        data.emplace_back (std::forward<T> (t)...);
                        closed_ = false;
                }

                cVar.notify_all ();
        }

        std::unique_ptr<Elem> pop ()
        {
                std::unique_lock lock{mutex};
                cVar.wait (lock, [this] { return !data.empty () || closed_; });

                if (closed_) {
                        return {};
                }

                auto p = std::make_unique<Elem> (data.front ());
                data.pop_front ();
                return p;
        }

        /*--------------------------------------------------------------------------*/

        void start ()
        {
                std::lock_guard lock{mutex};
                started_ = false;
        }

        std::unique_ptr<Elem> next ()
        {
                std::unique_lock lock{mutex};

                if (!index) {
                        index = 0;
                }

                cVar.wait (lock, [this] { return data.size () > *index || closed_; });

                if (closed_) {
                        return {};
                }

                auto p = std::make_unique<Elem> (data.at ((*index)++));
                return p;
        }

        /*--------------------------------------------------------------------------*/

        void close ()
        {
                {
                        std::lock_guard lock{mutex};
                        closed_ = true;
                }

                cVar.notify_all ();
        }

private:
        std::deque<Elem> data;
        std::mutex mutex;
        std::condition_variable cVar;

        // using Iterator = std::deque<Elem>::iterator;
        std::optional<size_t> index;
        bool started_{}; // Tells if iteration has been started and is in proces
        bool closed_{};  // Additional
};

/**
 * The same data but decompressed. In case of no compression on the device,
 * both RawCompressedData and RawData will contain the same data.
 */
using RawData = RawCompressedBlock;

/**
 * Sample data for multiple channels numbered by integer numbers. Some channels
 * may be missing for a block, so I
 * Data decoded from the RawData to the sample data organized by channels
 * (both digital and analog). This is the data that can be finally displayed
 * or consumed by the analyzers.
 */
struct SampleBlockStream {
        /// Single or multiple blocks.
        std::deque<SampleBlock> stream;
        std::vector<SampleBlockStream> children; // TODO may be optional or unique_ptr
};

/*--------------------------------------------------------------------------*/

/**
 * Bridge OO pattern I believe. Concrete classes of this interace will be
 * implemented by the users of this library. You could have one that displays
 * timepoints as dots, othe one  that displays squares or solor bars etc.
 */
struct IHintDrawer {};

/**
 * Some additional information coming from an analyzer.
 */
struct IDisplayHint {
        IDisplayHint () = default;
        IDisplayHint (IDisplayHint const &) = default;
        IDisplayHint &operator= (IDisplayHint const &) = default;
        IDisplayHint (IDisplayHint &&) noexcept = default;
        IDisplayHint &operator= (IDisplayHint &&) noexcept = default;
        virtual ~IDisplayHint () = default;

        virtual void draw (IHintDrawer *drw) = 0;
};

/**
 * Single marker on a single (?) channel. If you want to add more than one of thsese
 * consider using TimePoints class for efficiency.
 */
struct TPoint : public IDisplayHint {};

/**
 * Stream of markers.
 */
struct TPoints : public IDisplayHint {};

/**
 *
 */
struct Period : public IDisplayHint {};

using DisplayHints = std::vector<IDisplayHint>;

/*--------------------------------------------------------------------------*/

/**
 * Analyzer output format. This data accompanies the sample data and provides
 * additional, decoded information like binary->hex etc.
 */
struct AugumentedData {
        /// Decoded data
        Buffer data;

        // Additional information about the analyzed data.
        DisplayHints hints;
};

// struct Block {
//         // Block could have a sampleNumber and time_point
//         RawCompressedBlock rawCompressedData;
//         SampleBlockStream sampleData;
//         std::vector<std::unique_ptr<AugumentedData>> augumentedData;
//         // std::mutex mutex; // sizeof == ~40B Do I really need this?
// };

} // namespace logic