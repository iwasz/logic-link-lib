/****************************************************************************
 *                                                                          *
 *  Author : lukasz.iwaszkiewicz@gmail.com                                  *
 *  ~~~~~~~~                                                                *
 *  License : see COPYING file for details.                                 *
 *  ~~~~~~~~~                                                               *
 ****************************************************************************/

module;
#include <cstdint>
#include <mutex>
#include <string>
#include <unordered_set>
#include <vector>
export module logic:input;
export import :data;
import :event.queue;

namespace logic {
export class Session;

export struct DeviceInfo {
        int vid{};
        int pid{};
        int claimInterface{};
        int interfaceNumber{};
        int alternateSetting{};
};

export struct IInputObserver {
        IInputObserver () = default;
        IInputObserver (IInputObserver const &) = default;
        IInputObserver &operator= (IInputObserver const &) = default;
        IInputObserver (IInputObserver &&) noexcept = default;
        IInputObserver &operator= (IInputObserver &&) noexcept = default;
        virtual ~IInputObserver () = default;

        virtual void onStart () = 0;
        virtual void onStop () = 0;
        virtual size_t transferLen () const = 0;
};

export struct IInput {
        IInput () = default;
        IInput (IInput const &) = default;
        IInput &operator= (IInput const &) = default;
        IInput (IInput &&) noexcept = default;
        IInput &operator= (IInput &&) noexcept = default;
        virtual ~IInput () = default;

        /**
         * Basic USB bookeeping like opening thge device, claiming the interface
         * and so on.
         */
        virtual void open (DeviceInfo const &info) = 0;
        // virtual void hotplug (HotplugHooks const &hotplugHooks) = 0;

        virtual void controlOut (std::vector<uint8_t> const &request) = 0;
        virtual std::vector<uint8_t> controlIn (size_t len) = 0;

        /**
         * Sends a start command.
         */
        virtual void start (Session *session) = 0;

        /**
         * Send stop request to the device and inform the algorithms that it was sent.
         */
        virtual void stop () = 0;

        /**
         * Blocking acquisition and event listener method, that pushes the data at the
         * end of the `data` queue and observes the hotplug events.
         */
        virtual void run (/* Queue<RawCompressedBlock> *queue, IInputObserver *observer */) = 0;
};

/**
 * A helper.
 */
export class AbstractInput : public IInput {
public:
        AbstractInput (EventQueue *eventQueue) : eventQueue_{eventQueue} {}
        EventQueue *eventQueue () { return eventQueue_; }

private:
        EventQueue *eventQueue_;

protected:
        mutable std::mutex mutex;
};

} // namespace logic
