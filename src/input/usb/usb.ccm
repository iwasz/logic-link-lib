/****************************************************************************
 *                                                                          *
 *  Author : lukasz.iwaszkiewicz@gmail.com                                  *
 *  ~~~~~~~~                                                                *
 *  License : see COPYING file for details.                                 *
 *  ~~~~~~~~~                                                               *
 ****************************************************************************/

module;
#include "common/params.hh"
#include <atomic>
#include <cstdint>
#include <cstdlib>
#include <libusb.h>
module logic:input.usb;
import :input.usb.request;
import :data;

namespace logic::usb::async {

/**
 * Blocking acquisition.
 */
void acquire (common::acq::Params const &params, data::Session *session, size_t singleTransferLenB);

} // namespace logic::usb::async

namespace logic::usb::sync {

/**
 * Blocking acquisition.
 */
void acquire (data::RawData *rawData, size_t singleTransferLenB);

} // namespace logic::usb::sync

namespace logic::usb {
struct Context {
        libusb_device_handle *dev{};
        std::atomic<bool> initialized;
};

Context &ctx ();

struct Params {
        uint32_t usbTransfer{}; // TODO validate
        uint32_t usbBlock{};
};

namespace priv {
        inline Params &params ()
        {
                static Params _;
                return _;
        }
} // namespace priv

inline Params const &params () { return priv::params (); }

} // namespace logic::usb