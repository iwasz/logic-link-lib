/****************************************************************************
 *                                                                          *
 *  Author : lukasz.iwaszkiewicz@gmail.com                                  *
 *  ~~~~~~~~                                                                *
 *  License : see COPYING file for details.                                 *
 *  ~~~~~~~~~                                                               *
 ****************************************************************************/

module;
#include <climits>
#include <cstdint>
#include <vector>
export module logic:util.poly;
import :data;

namespace logic::util {

/**
 * "Draws" a binary data sterem as a poly line. Returns the coordinates as a vector of Coord (int,
 * float, etc). Data order is x0, y0, x1, y1 etc. ~~The w parameter is the limit (no vertices past
 * this point gets generated~~, h is the vertical stretch). Input data is expected to be a
 * collection of unsigned integers of arbitrary size. Every such word is then converted bit by bit.
 *
 * TODO If level does not change, no points hall be added, but rather the resulting line
 * shall be prolonged! For example if I call this with data collection containig 256 bytes
 * of value 0, this function shall output only 2 vertices which is not the case currently!
 */
export template <typename Coord, typename Collection>
std::vector<Coord> toPolyPointsW (Collection const &data, bool *lastBit, Coord w, Coord h, Coord lineWidth)
{
        Coord x = 0;
        std::vector<Coord> ret;
        ret.reserve (data.size () * CHAR_BIT);

        // Starting point.
        ret.push_back (0);
        ret.push_back ((*lastBit) ? (0) : (h));

        // bool clipped = false;

        for (uint8_t byte : data) {
#if 0
                if (cnt == 0 || cnt == data.size () - 1) {
                        std::print ("{:0b},", byte);
                }
                ++cnt;
#endif

                for (int i = CHAR_BIT - 1; i >= 0; --i) {
                        bool bit = (byte & (1 << i));

#if 0
                        ret.push_back (x);
                        ret.push_back ((bit) ? (0) : (h));
                        ret.push_back (x);
                        ret.push_back ((bit) ? (5) : (h - 5));
                        ret.push_back (x);
                        ret.push_back ((bit) ? (0) : (h));
#endif
                        // edge
                        if (*lastBit != bit) {
                                ret.push_back (x);
                                ret.push_back ((bit) ? (0) : (h));
                        }

                        // level
                        x += lineWidth;

                        // if (x >= w) { // Clipping
                        //         x = std::min (x, w); // Clip the plot if necesarry
                        //         i = -1;              // Make this iteration the last one
                        //         clipped = true;      // Break the outer loop as well
                        // }

                        ret.push_back (x);
                        ret.push_back ((bit) ? (0) : (h));

                        *lastBit = bit;
                }

                // if (clipped) {
                //         // For now I simply print a "warning". The clipping is undesirable.
                //         // std::println ("C");
                //         break;
                // }
        }

        return ret;
}

/**
 * All comments from the function above this one apply. But this one expects
 * a collection of bits (bools).
 */
export template <typename Coord, typename Collection>
std::vector<Coord> toPolyPointsb (Collection const &data, bool *lastBit, Coord h, Coord lineWidth, Coord padding)
{
        if (data.empty ()) {
                return {};
        }

        Coord x = padding * lineWidth;
        std::vector<Coord> ret;
        ret.reserve (data.size ());

        // Starting point.
        ret.push_back (x);
        ret.push_back ((*lastBit) ? (0) : (h));

        for (uint8_t bit : data) {
                // edge
                if (*lastBit != bit) {
                        ret.push_back (x);
                        ret.push_back ((bit) ? (0) : (h));
                }

                // level
                x += lineWidth;

                ret.push_back (x);
                ret.push_back ((bit) ? (0) : (h));

                *lastBit = bit;
        }

        return ret;
}

} // namespace logic::util