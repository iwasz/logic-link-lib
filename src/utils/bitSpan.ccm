/****************************************************************************
 *                                                                          *
 *  Author : lukasz.iwaszkiewicz@gmail.com                                  *
 *  ~~~~~~~~                                                                *
 *  License : see COPYING file for details.                                 *
 *  ~~~~~~~~~                                                               *
 ****************************************************************************/

module;
#include <climits>
#include <cstddef>
#include <iterator>
export module logic:util.span;
import :data;

namespace logic::util {

/**
 * Based on https://en.cppreference.com/w/cpp/iterator/forward_iterator.html
 */
export template <std::unsigned_integral T> class ForwardIterator {
public:
        using difference_type = std::ptrdiff_t;
        using value_type = bool;

        ForwardIterator () = default;
        ForwardIterator (T *data, size_t bitOffset) : data{data}, currentElemOffset{bitOffset / S}, currentBitOffset{bitOffset % S} {}

        bool operator* () const { return (*(data + currentElemOffset) & T (1 << (S - 1 - currentBitOffset))) != 0; }

        ForwardIterator &operator++ ()
        {

                if (++currentBitOffset >= S) {
                        currentBitOffset = 0;
                        ++currentElemOffset;
                }

                return *this;
        }

        ForwardIterator operator++ (int)
        {
                auto tmp = *this;
                ++*this;
                return tmp;
        }

        bool operator== (const ForwardIterator &a) const
        {
                return currentBitOffset == a.currentBitOffset && currentElemOffset == a.currentElemOffset && data == a.data;
        }

private:
        static constexpr auto S = sizeof (T) * CHAR_BIT;

        T *data{};
        size_t currentElemOffset{};
        size_t currentBitOffset{};
};

static_assert (std::forward_iterator<ForwardIterator<uint8_t>>);

/**
 * Semantics like std::span, but iteration happens bit by bit instead of
 * T element after T element. Bits are iterated over in the big endian manner
 * meaning from left to right.
 */
export template <std::unsigned_integral T> class BitSpan {
public:
        using iterator = ForwardIterator<T>;
        using const_iterator = ForwardIterator<T const>;

        BitSpan () = default;
        BitSpan (T *data, size_t bitOffset, size_t bitSize) : data{data}, offsetInBits{bitOffset}, sizeInBits{bitSize} {}

        iterator begin () { return {data, offsetInBits}; }
        const_iterator begin () const { return {data, offsetInBits}; }
        const_iterator cbegin () const { return {data, offsetInBits}; }

        iterator end () { return {data, offsetInBits + sizeInBits}; }
        const_iterator end () const { return {data, offsetInBits + sizeInBits}; }
        const_iterator cend () const { return {data, offsetInBits + sizeInBits}; }

        size_t size () const { return sizeInBits; }

private:
        T *data{};
        size_t offsetInBits{};
        size_t sizeInBits{};
};

} // namespace logic::util