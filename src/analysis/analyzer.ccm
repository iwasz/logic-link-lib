/****************************************************************************
 *                                                                          *
 *  Author : lukasz.iwaszkiewicz@gmail.com                                  *
 *  ~~~~~~~~                                                                *
 *  License : see COPYING file for details.                                 *
 *  ~~~~~~~~~                                                               *
 ****************************************************************************/

module;

#include <cstdlib>
#include <string>

export module logic.analysis:analyzer;
import logic.data;

export namespace logic {

struct IAnalyzer {
        IAnalyzer () = default;
        IAnalyzer (IAnalyzer const &) = default;
        IAnalyzer &operator= (IAnalyzer const &) = default;
        IAnalyzer (IAnalyzer &&) noexcept = default;
        IAnalyzer &operator= (IAnalyzer &&) noexcept = default;
        virtual ~IAnalyzer () = default;

        /// Pre analysis
        virtual void start () = 0;
        /// For every block
        virtual AugumentedData runRaw (RawData const &rd) = 0;
        virtual AugumentedData run (BlockArray const &bmd) = 0;
        /// Post analysis
        virtual void stop () = 0;
};

/**
 * A helper class
 */
class AbstractAnalyzer : public IAnalyzer {
public:
        AbstractAnalyzer () = default;
        explicit AbstractAnalyzer (size_t dmaBlockLenB) : dmaBlockLenB_{dmaBlockLenB} {}
        AbstractAnalyzer (AbstractAnalyzer const &) = default;
        AbstractAnalyzer &operator= (AbstractAnalyzer const &) = default;
        AbstractAnalyzer (AbstractAnalyzer &&) noexcept = default;
        AbstractAnalyzer &operator= (AbstractAnalyzer &&) noexcept = default;
        virtual ~AbstractAnalyzer () = default;

        // Usually working with the raw data (before reorder algorithm) is not performed.
        AugumentedData runRaw (RawData const & /* rd */) override { return {}; }

        // TODO Remove. This was used on early stage when I worked on the raw data.
        size_t dmaBlockLenB () const { return dmaBlockLenB_; }

private:
        size_t dmaBlockLenB_{};
};

/**
 * Single channel analyzer.
 */
class SingleChannelAnalyzer : public AbstractAnalyzer {
public:
        explicit SingleChannelAnalyzer (std::string channel = "") : channel_{std::move (channel)} {}
        SingleChannelAnalyzer (SingleChannelAnalyzer const &) = default;
        SingleChannelAnalyzer &operator= (SingleChannelAnalyzer const &) = default;
        SingleChannelAnalyzer (SingleChannelAnalyzer &&) noexcept = default;
        SingleChannelAnalyzer &operator= (SingleChannelAnalyzer &&) noexcept = default;
        virtual ~SingleChannelAnalyzer () = default;

        std::string &channel () { return channel_; }
        std::string const &channel () const { return channel_; }

private:
        std::string channel_;
};

} // namespace logic