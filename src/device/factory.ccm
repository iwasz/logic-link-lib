/****************************************************************************
 *                                                                          *
 *  Author : lukasz.iwaszkiewicz@gmail.com                                  *
 *  ~~~~~~~~                                                                *
 *  License : see COPYING file for details.                                 *
 *  ~~~~~~~~~                                                               *
 ****************************************************************************/

module;
#include <libusb.h>
#include <memory>
#include <set>
#include <string>
export module logic:device.factory;
import :device;
import :input.usb;
import :input.demo;
import :event;
import :device.factory.usb;

namespace logic {

export class Factory {
public:
        Factory (EventQueue *eventQueue) : usbFactory{eventQueue} {}
        Factory (Factory const &) = delete;
        Factory &operator= (Factory const &) = delete;
        Factory (Factory &&) = delete;
        Factory &operator= (Factory &&) = delete;
        ~Factory () = default;

        std::unique_ptr<IDevice> create (std::string const &name) const { return usbFactory.create (name); }
        std::set<std::string> getConnectedDevices () const;

        /*
         * TODO this has to be removed. This is left vecause right now I use it for
         * the async future argument both in cli and gui apps. Some more advanced task
         * management should get implemented instead.
         */
        UsbAsyncInput &usb () { return usbFactory.usb (); }

private:
        usb::Factory usbFactory;
};

/****************************************************************************/

std::set<std::string> Factory::getConnectedDevices () const
{
        std::set<std::string> set;
        set = usbFactory.getConnectedDevices ();
        return set;
}

}; // namespace logic