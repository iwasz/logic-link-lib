/****************************************************************************
 *                                                                          *
 *  Author : lukasz.iwaszkiewicz@gmail.com                                  *
 *  ~~~~~~~~                                                                *
 *  License : see COPYING file for details.                                 *
 *  ~~~~~~~~~                                                               *
 ****************************************************************************/

module;
#include <libusb.h>
export module logic:input.usb;
import :input;

namespace logic {
export struct UsbDevice;

/**
 * Structure for opening a device.
 */
export struct UsbDeviceInfo {
        int vid{};
        int pid{};
        int claimInterface{};
        int interfaceNumber{};
        int alternateSetting{};
};

/**
 * A DTO for adding a device to the main loop to be serviced by the UsbInput.
 */
export struct UsbHandle {
        UsbDevice *device{};
        Queue<RawCompressedBlock> *queue{};
        size_t transferLen{};
};

/**
 * Input speciffic for the USB devices using **libusb**. This is low level.
 */
export class UsbInput : public AbstractInput {
public:
        using AbstractInput::AbstractInput;

        virtual void start (UsbHandle const &handle) = 0;
        virtual void stop (UsbDevice *dev) = 0;
};

} // namespace logic
