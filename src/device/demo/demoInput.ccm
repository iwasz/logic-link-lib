/****************************************************************************
 *                                                                          *
 *  Author : lukasz.iwaszkiewicz@gmail.com                                  *
 *  ~~~~~~~~                                                                *
 *  License : see COPYING file for details.                                 *
 *  ~~~~~~~~~                                                               *
 ****************************************************************************/

module;
#include "common/params.hh"
#include <atomic>
#include <cstdlib>
#include <libusb.h>
#include <mutex>
export module logic:input.demo;
export import :input.usb;

namespace logic {
// class Session;

/**
 * Demo input device that can be providedinstead of the UsbAsync device.
 * Generates an exemplary stream of data (possibly random).
 *
 * It also serves as an API validation class. Regard it as a entity completely
 * separate from the USB bus. Is the API universal enough to accomodate other
 * busses? For instance could a WiFi connection be handled by this API?
 */
export class DemoInput : public UsbInput {
public:
        using UsbInput::UsbInput;

        void start (UsbHandle const &handle) override;
        void stop (UsbDevice *dev) override;

        void run () override;
        void kill () override { stop_ = true; }

private:
        std::atomic_bool running_;
        std::atomic_bool stop_; /// Send stop request to the device.

        common::acq::Params acquisitionParams;

        size_t blockSize{}; /// The size (in digital samples) of every generated block
        // Session *session{};
        std::mutex mutex;
};

} // namespace logic