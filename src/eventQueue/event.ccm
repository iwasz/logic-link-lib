/****************************************************************************
 *                                                                          *
 *  Author : lukasz.iwaszkiewicz@gmail.com                                  *
 *  ~~~~~~~~                                                                *
 *  License : see COPYING file for details.                                 *
 *  ~~~~~~~~~                                                               *
 ****************************************************************************/

module;
#include <any>
#include <functional>
#include <string>
export module logic:event;

namespace logic {

/**
 * One off event.
 */
export struct IEvent {
        IEvent () = default;
        IEvent (IEvent const &) = default;
        IEvent &operator= (IEvent const &) = default;
        IEvent (IEvent &&) noexcept = default;
        IEvent &operator= (IEvent &&) noexcept = default;
        virtual ~IEvent () = default;
        virtual void execute (std::any const &func) const = 0;
};

/**
 *
 */
export class AbstractNullaryEvent : public IEvent {
public:
        void execute (std::any const &func) const override
        {
                auto f = std::any_cast<std::function<void ()>> (func);
                f ();
        }
};

/**
 *
 */
export class ErrorEvent : public IEvent {
public:
        explicit ErrorEvent (std::string message) : message{std::move (message)} {}

        void execute (std::any const &func) const override
        {
                auto f = std::any_cast<std::function<void (std::string const &)>> (func);
                f (message);
        }

private:
        std::string message;
};

} // namespace logic