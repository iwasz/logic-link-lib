/****************************************************************************
 *                                                                          *
 *  Author : lukasz.iwaszkiewicz@gmail.com                                  *
 *  ~~~~~~~~                                                                *
 *  License : see COPYING file for details.                                 *
 *  ~~~~~~~~~                                                               *
 ****************************************************************************/

module;
#include "common/error.hh"
#include "common/params.hh"
#include "common/stats.hh"
#include <libusb.h>
#include <unordered_set>
export module logic.peripheral:device.link;
import :usbDevice;

namespace logic {

export class LogicLink : public UsbDevice {
public:
        LogicLink (EventQueue *eventQueue, libusb_device_handle *dev);

        std::string name () const override { return "LogicLink"; }
        std::string hwVersion () const override;
        std::string fwVersion () const override;
        std::string deviceSerial () const override;
        std::string mcuSerial () const override;

        void start (Queue<RawCompressedBlock> *queue) override;
        void stop () override;

        void writeAcquisitionParams (common::acq::Params const &params, bool legacy = false)  override;
        common::acq::Params readAcquisitionParams () const override;

        void writeTransmissionParams (UsbTransmissionParams const &params)  override;
        virtual UsbTransmissionParams readTransmissionParams () const override;

        common::usb::Stats getStats () override;
        std::unordered_set<logs::Code> getErrors () override;
        void clearErrors () override;
};

/**
 * Dummy device used for ttesting. See UsbFactory class for VID and PID.
 * Physically this is a logicLinkRevA0 but with PID set to 0x41fe.
 *
 */
export class LogicLinkDummy : public LogicLink {
public:
        using LogicLink::LogicLink;
        constexpr std::string name () const override { return "LogicLinkDummy"; }
};

} // namespace logic