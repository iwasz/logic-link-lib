/****************************************************************************
 *                                                                          *
 *  Author : lukasz.iwaszkiewicz@gmail.com                                  *
 *  ~~~~~~~~                                                                *
 *  License : see COPYING file for details.                                 *
 *  ~~~~~~~~~                                                               *
 ****************************************************************************/

module;
#include <functional>
#include <libusb.h>
#include <memory>
#include <string>
#include <vector>
export module logic.peripheral:device.factory.usb;
import :device;
import logic.core;

namespace logic {
export class UsbAsyncInput;

/**
 * Tool for creating UsbDevices.
 *
 * Very curious and sad thing, but I encountered a vscode / debug plugin
 * bug when I had 2 classes called Factory (in different namespaces).
 * It led to some kind of indefinite recurence in liblldb / vgdb vscode
 * plugins and debug adapter crash. LLDB and GDB alone worked OK.
 */
export class UsbFactory {
public:
        UsbFactory (EventQueue *eventQueue, UsbAsyncInput *usb);
        UsbFactory (UsbFactory const &) = delete;
        UsbFactory &operator= (UsbFactory const &) = delete;
        UsbFactory (UsbFactory &&) = delete;
        UsbFactory &operator= (UsbFactory &&) = delete;
        ~UsbFactory () = default;

        /**
         * Create a device by vid and pid, doesn't block.
         */
        std::unique_ptr<UsbDevice> create (int vid, int pid, libusb_device_handle *h) const;

private:
        /**
         * All inputs are created here and are shared by all the devices.
         */
        EventQueue *eventQueue_;

        using FactoryFunction = std::function<std::unique_ptr<UsbDevice> (libusb_device_handle *h)>;

        struct UsbEntry {
                std::string name;
                int vid{};
                int pid{};
                FactoryFunction create;
        };

        std::vector<UsbEntry> usbEntries;

        UsbEntry const *find (int vid, int pid) const;
        UsbEntry const *find (std::string const &name) const;

        // struct DemoEntry {
        //         std::string name;
        //         FactoryFunction create;
        // };

        // std::vector<DemoEntry> demoEntries;
};

}; // namespace logic