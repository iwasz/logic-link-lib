/****************************************************************************
 *                                                                          *
 *  Author : lukasz.iwaszkiewicz@gmail.com                                  *
 *  ~~~~~~~~                                                                *
 *  License : see COPYING file for details.                                 *
 *  ~~~~~~~~~                                                               *
 ****************************************************************************/

module;
#include "common/error.hh"
#include "common/params.hh"
#include "common/stats.hh"
#include <thread>
#include <unordered_set>
#include <vector>
export module logic.peripheral:device.demo;

import logic.core;
import logic.processing;
import :input;
import :device;

namespace logic {

/**
 *
 */
export class DemoDevice : public AbstractDevice {
public:
        DemoDevice (EventQueue *eventQueue);
        DemoDevice (DemoDevice const &) = delete;
        DemoDevice &operator= (DemoDevice const &) = delete;
        DemoDevice (DemoDevice &&) noexcept = delete;
        DemoDevice &operator= (DemoDevice &&) noexcept = delete;
        ~DemoDevice () { stop (); }

        std::string name () const override { return "DemoDevice"; }
        std::string hwVersion () const override { return "revX0"; }
        std::string fwVersion () const override { return "todo_gui_version"; }
        std::string deviceSerial () const override { return "demod_0001"; }
        std::string mcuSerial () const override { return "12345678"; }

        void writeAcquisitionParams (common::acq::Params const &params, bool legacy) override;
        common::acq::Params readAcquisitionParams () const override { return acquisitionParams; }

        void start (IBackend *backend) override;
        void stop () override;
        void run () override {}

        common::usb::Stats getStats () override { return {}; }
        std::unordered_set<logs::Code> getErrors () override { return {}; }
        void clearErrors () override {}

protected:
        EventQueue *eventQueue () override { return eventQueue_; }

private:
        EventQueue *eventQueue_;
        /// Current output, destination of the acquired data.
        Queue<RawCompressedBlock> queue{};
        std::thread thread;
        /// Simulated USB transfer size (amount of data generated at once).
        size_t transferSize = DEFAULT_USB_TRANSFER_SIZE_B;
        std::vector<Square> generators;
        /// Some statistics.
        size_t totalSizePerChan{};
};

/**
 * Demo device detected.
 */
export struct DemoDeviceAlarm : public DeviceAlarm {
        using DeviceAlarm::DeviceAlarm;
        struct Set {};
        struct Clear {};
};

} // namespace logic