/****************************************************************************
 *                                                                          *
 *  Author : lukasz.iwaszkiewicz@gmail.com                                  *
 *  ~~~~~~~~                                                                *
 *  License : see COPYING file for details.                                 *
 *  ~~~~~~~~~                                                               *
 ****************************************************************************/

module;
#include "common/error.hh"
#include "common/params.hh"
#include "common/stats.hh"
#include <any>
#include <atomic>
#include <libusb.h>
#include <unordered_set>
export module logic.peripheral:device.demo;
import logic.core;
import :input;
import :device;

namespace logic {

/**
 *
 */
export class DemoDevice : public IDevice {
public:
        DemoDevice (EventQueue *eventQueue) : eventQueue_{eventQueue} {}

        std::string name () const override { return "DemoDevice"; }
        std::string hwVersion () const override { return "revX0"; }
        std::string fwVersion () const override { return "todo_gui_version"; }
        std::string deviceSerial () const override { return "demod_0001"; }
        std::string mcuSerial () const override { return "12345678"; }

        void writeAcquisitionParams (common::acq::Params const &params, bool /* legacy */ = false)  override;
        common::acq::Params readAcquisitionParams () const override {return params_;}

        void start (Queue<RawCompressedBlock> *queue) override;
        void stop () override;
        State state () const override { return {}; }     // TODO implement
        bool running () const override { return false; } // TODO implement

        common::usb::Stats getStats () override { return {}; }
        std::unordered_set<logs::Code> getErrors () override { return {}; }
        void clearErrors () override {}

protected:
        EventQueue *eventQueue () { return eventQueue_; }

private:
        EventQueue *eventQueue_;
        common::acq::Params params_;

        /// Used to stop re-issuing the transfer.
        std::atomic_bool stopRequest;

        /// Current output, destination of the acquired data.
        Queue<RawCompressedBlock> *queue{};
};

/**
 * Demo device detected.
 */
export struct DemoDeviceAlarm : public DeviceAlarm {
        using DeviceAlarm::DeviceAlarm;
        struct Set {};
        struct Clear {};
};

} // namespace logic